{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","del","id","tables","state","table","splice","setState","cookies","set","path","edit","temps","task","temp","add","tasks","push","handle","event","target","value","save","parseInt","handleKeypress","e","charCode","Cookies","tCookies","get","Array","isArray","console","log","className","border","this","map","key","onClick","onKeyPress","onChange","placeholder","type","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ed60e7b1.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Cookies from 'universal-cookie';\n\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.cookies = new Cookies();\n    //console.log(\"Hello: \"+this.cookies.get('tasks'));\n    let tCookies = this.cookies.get('tasks');\n    var tables = tCookies;\n\n    if (!Array.isArray(tCookies)) {\n      console.log(\"Undefines\");\n      tables = [{\n        \"task\": \"Sanjay\"\n      },\n      {\n        \"task\": \"Developer\"\n      }];\n    }\n\n    this.cookies.set('tasks', tables, { path: '/' });\n\n    this.state = { table: tables, temp: \"\" };\n    console.log(this.state.table);\n  }\n\n  del = (id) => {\n    var tables = this.state.table;\n    tables.splice(id, 1);\n    this.setState({ table: tables });\n    this.cookies.set('tasks', tables, { path: '/' });\n  }\n\n  edit = (id) => {\n    var tables = this.state.table;\n\n    var temps = tables[id].task;\n\n    this.setState({ temp: temps });\n  }\n\n  add = () => {\n    var tasks = this.state.temp;\n    if (tasks === \"\") {\n      return;\n    }\n    var tables = this.state.table;\n    tables.push({ task: tasks });\n    this.setState({ table: tables, temp: \"\" });\n    this.cookies.set('tasks', tables, { path: '/' });\n  }\n\n  handle = (event) => {\n    this.setState({ temp: event.target.value });\n  }\n\n  save = (event) => {\n    var id = parseInt(event.target.id);\n    var tables = this.state.table;\n    var temps = this.state.temp;\n    if (temps === \"\") {\n      return;\n    }\n    // console.log(id);\n    tables[id].task = temps;\n\n    this.setState({ table: tables, temp: \"\" });\n    this.cookies.set('tasks', tables, { path: '/' });\n  }\n  handleKeypress = e => {\n\n    if (e.charCode === 13) {\n      this.add();\n\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <header className=\"App-header\">\n\n          <table border=\"1\">\n            <thead>\n              <tr>\n                <th>Task</th>\n                <th>Edit</th>\n                <th>Delete</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.state.table.map((tables, id) => (\n                <tr key={id}>\n                  <td>{tables.task}</td>\n                  <td><button value={id} onClick={e => this.edit(id)} className=\"btn btn-orange\" id={id + \"_edit\"}>Edit</button><button value={id} onClick={this.save} className=\"btn btn-green\" id={id + \"_save\"}>Save</button></td>\n                  <td><button value={id} onClick={e => this.del(id)} className=\"btn btn-red\" id={id + \"_del\"}>Delete</button></td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </header>\n        <header className=\"Header\">\n          <div className=\"form\">\n            <input onKeyPress={this.handleKeypress} onChange={this.handle} placeholder=\"Tasks\" value={this.state.temp} className=\"inline\" type=\"text\" id=\"name_t\" />\n            <button onClick={this.add} className=\"btn btn-add\">Add</button>\n          </div>\n        </header>\n      </div>\n\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}